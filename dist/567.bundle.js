"use strict";(self.webpackChunklocom=self.webpackChunklocom||[]).push([[567],{8567:(n,e,t)=>{t.r(e),t.d(e,{AttributionControl:()=>k,Circle:()=>S,CircleMarker:()=>z,FeatureGroup:()=>M,GeoJSON:()=>B,ImageOverlay:()=>N,LayerGroup:()=>T,LayersControl:()=>_,MapContainer:()=>V,Marker:()=>Z,Pane:()=>$,Polygon:()=>q,Polyline:()=>D,Popup:()=>Y,Rectangle:()=>K,SVGOverlay:()=>en,ScaleControl:()=>Q,TileLayer:()=>rn,Tooltip:()=>on,VideoOverlay:()=>un,WMSTileLayer:()=>an,ZoomControl:()=>cn,useMap:()=>l,useMapEvent:()=>i,useMapEvents:()=>s});var r=t(6540);function o(n,e){return Object.freeze({...n,...e})}const u=(0,r.createContext)(null),a=u.Provider;function c(){const n=(0,r.useContext)(u);if(null==n)throw new Error("No context provided: useLeafletContext() can only be used in a descendant of <MapContainer>");return n}function l(){return c().map}function i(n,e){const t=l();return(0,r.useEffect)(function(){return t.on(n,e),function(){t.off(n,e)}},[t,n,e]),t}function s(n){const e=l();return(0,r.useEffect)(function(){return e.on(n),function(){e.off(n)}},[e,n]),e}var f=t(961);function p(n){function e(e,t){const{instance:o,context:u}=n(e).current;return(0,r.useImperativeHandle)(t,()=>o),null==e.children?null:r.createElement(a,{value:u},e.children)}return(0,r.forwardRef)(e)}function d(n){function e(e,t){const{instance:o}=n(e).current;return(0,r.useImperativeHandle)(t,()=>o),null}return(0,r.forwardRef)(e)}function y(n){return function(e){const t=c(),o=n(e,t),{instance:u}=o.current,a=(0,r.useRef)(e.position),{position:l}=e;return(0,r.useEffect)(function(){return u.addTo(t.map),function(){u.remove()}},[t.map,u]),(0,r.useEffect)(function(){null!=l&&l!==a.current&&(u.setPosition(l),a.current=l)},[u,l]),o}}function m(n,e,t){return Object.freeze({instance:n,context:e,container:t})}function v(n,e){return null==e?function(e,t){const o=(0,r.useRef)();return o.current||(o.current=n(e,t)),o}:function(t,o){const u=(0,r.useRef)();u.current||(u.current=n(t,o));const a=(0,r.useRef)(t),{instance:c}=u.current;return(0,r.useEffect)(function(){a.current!==t&&(e(c,t,a.current),a.current=t)},[c,t,o]),u}}function b(n,e){const t=(0,r.useRef)(e);(0,r.useEffect)(function(){e!==t.current&&null!=n.attributionControl&&(null!=t.current&&n.attributionControl.removeAttribution(t.current),null!=e&&n.attributionControl.addAttribution(e)),t.current=e},[n,e])}function w(n,e){const t=(0,r.useRef)();(0,r.useEffect)(function(){return null!=e&&n.instance.on(e),t.current=e,function(){null!=t.current&&n.instance.off(t.current),t.current=null}},[n,e])}function C(n,e){const t=n.pane??e.pane;return t?{...n,pane:t}:n}function h(n,e){(0,r.useEffect)(function(){return(e.layerContainer??e.map).addLayer(n.instance),function(){e.layerContainer?.removeLayer(n.instance),e.map.removeLayer(n.instance)}},[e,n])}function g(n){return function(e){const t=c(),r=n(C(e,t),t);return b(t.map,e.attribution),w(r.current,e.eventHandlers),h(r.current,t),r}}function L(n){return d(y(v(function(e,t){return m(n(e),t)})))}function E(n,e){return p(g(v(n,e)))}function O(n,e){const t=function(n,e){return function(t,r){const o=c(),u=n(C(t,o),o);return b(o.map,t.attribution),w(u.current,t.eventHandlers),e(u.current,o,t,r),u}}(v(n),e);return function(n){function e(e,t){const[o,u]=(0,r.useState)(!1),{instance:a}=n(e,u).current;(0,r.useImperativeHandle)(t,()=>a),(0,r.useEffect)(function(){o&&a.update()},[a,o,e.children]);const c=a._contentNode;return c?(0,f.createPortal)(e.children,c):null}return(0,r.forwardRef)(e)}(t)}function P(n,e){return p((t=v(n,e),function(n){const e=c(),o=t(C(n,e),e);return w(o.current,n.eventHandlers),h(o.current,e),function(n,e){const t=(0,r.useRef)();(0,r.useEffect)(function(){if(e.pathOptions!==t.current){const r=e.pathOptions??{};n.instance.setStyle(r),t.current=r}},[n,e])}(o.current,n),o}));var t}function x(n,e){return d(g(v(n,e)))}var I=t(3481);const k=L(function(n){return new I.Control.Attribution(n)});function R(n,e,t){e.center!==t.center&&n.setLatLng(e.center),null!=e.radius&&e.radius!==t.radius&&n.setRadius(e.radius)}const S=P(function({center:n,children:e,...t},r){const u=new I.Circle(n,t);return m(u,o(r,{overlayContainer:u}))},R),z=P(function({center:n,children:e,...t},r){const u=new I.CircleMarker(n,t);return m(u,o(r,{overlayContainer:u}))},R),M=P(function({children:n,...e},t){const r=new I.FeatureGroup([],e);return m(r,o(t,{layerContainer:r,overlayContainer:r}))}),B=P(function({data:n,...e},t){const r=new I.GeoJSON(n,e);return m(r,o(t,{overlayContainer:r}))},function(n,e,t){e.style!==t.style&&(null==e.style?n.resetStyle():n.setStyle(e.style))});function H(n,e,t){e.bounds instanceof I.LatLngBounds&&e.bounds!==t.bounds&&n.setBounds(e.bounds),null!=e.opacity&&e.opacity!==t.opacity&&n.setOpacity(e.opacity),null!=e.zIndex&&e.zIndex!==t.zIndex&&n.setZIndex(e.zIndex)}const N=E(function({bounds:n,url:e,...t},r){const u=new I.ImageOverlay(e,n,t);return m(u,o(r,{overlayContainer:u}))},function(n,e,t){if(H(n,e,t),e.bounds!==t.bounds){const t=e.bounds instanceof I.LatLngBounds?e.bounds:new I.LatLngBounds(e.bounds);n.setBounds(t)}e.url!==t.url&&n.setUrl(e.url)}),T=E(function({children:n,...e},t){const r=new I.LayerGroup([],e);return m(r,o(t,{layerContainer:r}))}),_=p(y(v(function({children:n,...e},t){const r=new I.Control.Layers(void 0,void 0,e);return m(r,o(t,{layersControl:r}))},function(n,e,t){e.collapsed!==t.collapsed&&(!0===e.collapsed?n.collapse():n.expand())})));function G(n){return function(e){const t=c(),u=(0,r.useRef)(e),[l,i]=(0,r.useState)(null),{layersControl:s,map:f}=t,p=(0,r.useCallback)(e=>{null!=s&&(u.current.checked&&f.addLayer(e),n(s,e,u.current.name),i(e))},[s,f]),d=(0,r.useCallback)(n=>{s?.removeLayer(n),i(null)},[s]),y=(0,r.useMemo)(()=>o(t,{layerContainer:{addLayer:p,removeLayer:d}}),[t,p,d]);return(0,r.useEffect)(()=>{null!==l&&u.current!==e&&(!0!==e.checked||null!=u.current.checked&&!1!==u.current.checked?!0!==u.current.checked||null!=e.checked&&!1!==e.checked||f.removeLayer(l):f.addLayer(l),u.current=e)}),e.children?r.createElement(a,{value:y},e.children):null}}function j(){return j=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},j.apply(this,arguments)}function A({bounds:n,boundsOptions:e,center:t,children:o,className:u,id:c,placeholder:l,style:i,whenReady:s,zoom:f,...p},d){const[y]=(0,r.useState)({className:u,id:c,style:i}),[m,v]=(0,r.useState)(null);(0,r.useImperativeHandle)(d,()=>m?.map??null,[m]);const b=(0,r.useCallback)(r=>{if(null!==r&&null===m){const o=new I.Map(r,p);null!=t&&null!=f?o.setView(t,f):null!=n&&o.fitBounds(n,e),null!=s&&o.whenReady(s),v(function(n){return Object.freeze({__version:1,map:n})}(o))}},[]);(0,r.useEffect)(()=>()=>{m?.map.remove()},[m]);const w=m?r.createElement(a,{value:m},o):l??null;return r.createElement("div",j({},y,{ref:b}),w)}_.BaseLayer=G(function(n,e,t){n.addBaseLayer(e,t)}),_.Overlay=G(function(n,e,t){n.addOverlay(e,t)});const V=(0,r.forwardRef)(A),Z=E(function({position:n,...e},t){const r=new I.Marker(n,e);return m(r,o(t,{overlayContainer:r}))},function(n,e,t){e.position!==t.position&&n.setLatLng(e.position),null!=e.icon&&e.icon!==t.icon&&n.setIcon(e.icon),null!=e.zIndexOffset&&e.zIndexOffset!==t.zIndexOffset&&n.setZIndexOffset(e.zIndexOffset),null!=e.opacity&&e.opacity!==t.opacity&&n.setOpacity(e.opacity),null!=n.dragging&&e.draggable!==t.draggable&&(!0===e.draggable?n.dragging.enable():n.dragging.disable())});function U(n,e){(function(n){return n.split(" ").filter(Boolean)})(e).forEach(e=>{I.DomUtil.addClass(n,e)})}const F=["mapPane","markerPane","overlayPane","popupPane","shadowPane","tilePane","tooltipPane"];function J(n,e){const{[e]:t,...r}=n;return r}function W(n,e){const[t]=(0,r.useState)(n.name),[o,u]=(0,r.useState)(null);(0,r.useImperativeHandle)(e,()=>o,[o]);const l=c(),i=(0,r.useMemo)(()=>({...l,pane:t}),[l]);return(0,r.useEffect)(()=>(u(function(n,e,t){if(-1!==F.indexOf(n))throw new Error(`You must use a unique name for a pane that is not a default Leaflet pane: ${n}`);if(null!=t.map.getPane(n))throw new Error(`A pane with this name already exists: ${n}`);const r=e.pane??t.pane,o=r?t.map.getPane(r):void 0,u=t.map.createPane(n,o);return null!=e.className&&U(u,e.className),null!=e.style&&Object.keys(e.style).forEach(n=>{u.style[n]=e.style[n]}),u}(t,n,l)),function(){const n=l.map.getPane(t);n?.remove?.(),null!=l.map._panes&&(l.map._panes=J(l.map._panes,t),l.map._paneRenderers=J(l.map._paneRenderers,t))}),[]),null!=n.children&&null!=o?(0,f.createPortal)(r.createElement(a,{value:i},n.children),o):null}const $=(0,r.forwardRef)(W),q=P(function({positions:n,...e},t){const r=new I.Polygon(n,e);return m(r,o(t,{overlayContainer:r}))},function(n,e,t){e.positions!==t.positions&&n.setLatLngs(e.positions)}),D=P(function({positions:n,...e},t){const r=new I.Polyline(n,e);return m(r,o(t,{overlayContainer:r}))},function(n,e,t){e.positions!==t.positions&&n.setLatLngs(e.positions)}),Y=O(function(n,e){return m(new I.Popup(n,e.overlayContainer),e)},function(n,e,{position:t},o){(0,r.useEffect)(function(){const{instance:r}=n;function u(n){n.popup===r&&(r.update(),o(!0))}function a(n){n.popup===r&&o(!1)}return e.map.on({popupopen:u,popupclose:a}),null==e.overlayContainer?(null!=t&&r.setLatLng(t),r.openOn(e.map)):e.overlayContainer.bindPopup(r),function(){e.map.off({popupopen:u,popupclose:a}),e.overlayContainer?.unbindPopup(),e.map.removeLayer(r)}},[n,e,o,t])}),K=P(function({bounds:n,...e},t){const r=new I.Rectangle(n,e);return m(r,o(t,{overlayContainer:r}))},function(n,e,t){e.bounds!==t.bounds&&n.setBounds(e.bounds)}),Q=L(function(n){return new I.Control.Scale(n)}),X=g(v(function(n,e){const{attributes:t,bounds:r,...o}=n,u=document.createElementNS("http://www.w3.org/2000/svg","svg");return u.setAttribute("xmlns","http://www.w3.org/2000/svg"),null!=t&&Object.keys(t).forEach(n=>{u.setAttribute(n,t[n])}),m(new I.SVGOverlay(u,r,o),e,u)},H));function nn({children:n,...e},t){const{instance:o,container:u}=X(e).current;return(0,r.useImperativeHandle)(t,()=>o),null==u||null==n?null:(0,f.createPortal)(n,u)}const en=(0,r.forwardRef)(nn);function tn(n,e,t){const{opacity:r,zIndex:o}=e;null!=r&&r!==t.opacity&&n.setOpacity(r),null!=o&&o!==t.zIndex&&n.setZIndex(o)}const rn=x(function({url:n,...e},t){return m(new I.TileLayer(n,C(e,t)),t)},function(n,e,t){tn(n,e,t);const{url:r}=e;null!=r&&r!==t.url&&n.setUrl(r)}),on=O(function(n,e){return m(new I.Tooltip(n,e.overlayContainer),e)},function(n,e,{position:t},o){(0,r.useEffect)(function(){const r=e.overlayContainer;if(null==r)return;const{instance:u}=n,a=n=>{n.tooltip===u&&(null!=t&&u.setLatLng(t),u.update(),o(!0))},c=n=>{n.tooltip===u&&o(!1)};return r.on({tooltipopen:a,tooltipclose:c}),r.bindTooltip(u),function(){r.off({tooltipopen:a,tooltipclose:c}),null!=r._map&&r.unbindTooltip()}},[n,e,o,t])}),un=E(function({bounds:n,url:e,...t},r){const u=new I.VideoOverlay(e,n,t);return!0===t.play&&u.getElement()?.play(),m(u,o(r,{overlayContainer:u}))},function(n,e,t){H(n,e,t),"string"==typeof e.url&&e.url!==t.url&&n.setUrl(e.url);const r=n.getElement();null!=r&&(!0!==e.play||t.play?e.play||!0!==t.play||r.pause():r.play())}),an=x(function({eventHandlers:n,params:e={},url:t,...r},o){return m(new I.TileLayer.WMS(t,{...e,...C(r,o)}),o)},function(n,e,t){tn(n,e,t),null!=e.params&&e.params!==t.params&&n.setParams(e.params)}),cn=L(function(n){return new I.Control.Zoom(n)})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,